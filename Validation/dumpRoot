#!/usr/bin/env python

import sys,os
from shutil import rmtree

# Set ROOT environment
#if 'ROOTSYS' not in os.environ.keys():
#	os.environ['ROOTSYS'] ='/afs/cern.ch/sw/lcg/external/root/5.20.00/slc4_ia32_gcc34/root'
#sys.path.append(os.environ['ROOTSYS']+'/lib')

def help():
	usage = """dumpRoot : Save ROOT histograms to image files
Usage : dumpRoot source.root[/sub/TDirectories] [destination_directory [extension1,extension2,...]]

	To save all histograms of source.root as gif images to current directory:
		dumpRoot source.root 
	One can specify output directory:
		dumpRoot source.root my/output/directory
	If you want to dump sub-TDirectory:
		dumpRoot source.root/sub/TDirectory/Path
	You can give list of output extensions (cannot omit output path in this case):
		dumpRoot source.root outPath gif,svg,jpg,png,pdf"""
	print usage

class Processor:
	def __init__(self, outFileName, objPath, outPath, exts):
		self.outPath = outPath
		self.exts = exts

		outFile = TFile(outFileName)
		if not outFile.IsOpen():
			print "Cannot open file ", outFileName
			sys.exit(2)
		obj = outFile.GetDirectory(objPath)

		self.process(obj, outPath)
		
	def process(self, obj, outPath):
		if obj == None: return False
		objInfo = obj.IsA()
			
		if ( objInfo.InheritsFrom("TH1") or
		     objInfo.InheritsFrom("TH2") ):
			name = obj.GetName()+"_canvas"
			title = obj.GetTitle()
			canvas = TCanvas(name, title)
			obj.Draw()
			self.saveOutput(canvas, outPath, obj.GetName())

		elif objInfo.InheritsFrom("TCanvas"):
			canvas = TCanvas(obj)
			self.saveOutput(canvas, outPath, obj.GetName())
			
		elif objInfo.InheritsFrom("TDirectory"):
			directory = TDirectory
			directory = obj
			
		# make new directory
			newPath = outPath
			if not directory.GetName()[-5:] == ".root" :
				newPath = newPath+"/"+directory.GetName()
				
			os.makedirs(newPath)
			
			keys = directory.GetListOfKeys()
			for i in range(0, keys.GetSize()):
				self.process(keys[i].ReadObj(), newPath)

		else:
			print "Unknown object : ",
			print " type = ", objInfo.GetName(),
			print " name = ", obj.GetName(),
			print " title = ", obj.GetTitle()
		
	def saveOutput(self, canvas, outPath, name):
		for ext in self.exts:
			fileName = "%s/%s.%s" % (outPath, name, ext)
			canvas.Print(fileName)

if __name__ == "__main__":
	if 'ROOTSYS' not in os.environ:
		print "ROOTSYS is not set"
		sys.exit(1)

	argc = len(sys.argv)
	if argc == 1:
		help()
		sys.exit(1)

	if argc == 2:
		sys.argv.append(".")

	if argc < 4:
		sys.argv.append("gif")

	srcFileName = sys.argv[1]
	dstDirName = sys.argv[2]
	exts = sys.argv[3].split(",")
	objPath = "/"

	splitPos = srcFileName.rfind(".root/")
	if splitPos != -1:
		splitPos += len(".root")
		objPath = srcFileName[splitPos:]
		srcFileName = srcFileName[:splitPos]

	# Check file existence
	if not os.path.exists(srcFileName):
		print "No such file : ", srcFileName
		sys.exit(2)

	# Ask user to remove existing directory (or exit)
	if os.path.exists(dstDirName):
		print "Directory exists. overwrite?"
		yn = raw_input("Overwrite existing directory %s ? [Y/N]: " % dstDirName)
		if yn.upper() == 'Y':
			rmtree(dstDirName)
		else:
			sys.exit(1)
			

	# Start ROOT session without X11 display (to speed up)
	sys.argv.append('-b')
	from ROOT import TFile, TDirectory, TCanvas

	processor = Processor(srcFileName, objPath, dstDirName, exts)
