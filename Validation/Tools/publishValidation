#!/usr/bin/env python
import sys, os

if 'ROOTSYS' not in os.environ:
    print 'ROOTSYS not set'
    sys.exit(1)

if len(sys.argv) == 1:
    print 'Usage : ', sys.argv[0], ' CMSSW_RELEASE1 CMSSW_RELEASE2 ...'
    sys.exit(2)

# Make ROOT session to be run in batch mode
sys.argv = [sys.argv[0], '-b']+sys.argv[1:]

import ROOT

# Set constants
selections = ("SimVsReco",
              #"SimVsDTExt", "SimVsCSCExt",
              #"DTVsReco", "CSCVsReco")#, "TrackVsReco")
)
overlayHists = ("ClusterSize", 
                "Efficiency/globalEfficiencies", 
                "Efficiency/Effic_Wheel", "Efficiency/Effic_Disk",
                "Efficiency/Noise_Wheel", "Efficiency/Noise_Disk",
                "Efficiency/Lost_Wheel", "Efficiency/Lost_Disk",
                "Residual/Res_W",
                "Resolution/Res_W_Mean", "Resolution/Res_D_Mean", 
                "Resolution/Res_W_Sigma", "Resolution/Res_D_Sigma", 
                "Residual/Pull_W",
                "Resolution/Pull_W_Mean", "Resolution/Pull_D_Mean",
                "Resolution/Pull_W_Sigma", "Resolution/Pull_D_Sigma",
)
fitHists = ("Residual/Res_W", "Residual/Res_D",
            "Residual/Pull_W", "Residual/Pull_D",
)
ext = ".gif"

# Get list of files
rootFiles = {}
releases = []
samples = set()
for release in sys.argv[2:]:
    #srcDir = os.path.join(release, 'src/Validation/RPCRecHits/test')
    srcDir = os.path.join('/home/jhgoh/data/Validation', release)
    if not os.path.isdir(srcDir):
        continue
    for fileName in os.listdir(srcDir):
        ## Consider DQM based validation root files only
        if fileName[-17:] != "__Validation.root" or fileName[:3] != "DQM":
            continue

        sampleName = fileName.split("__")[2]

        ## Open the root file
        rootFile = ROOT.TFile(os.path.join(srcDir, fileName))
        if not rootFile.IsOpen():
            continue

        ## Append to the file list
        if sampleName not in rootFiles:
            rootFiles[sampleName] = {}

        rootFiles[sampleName][release] = rootFile
        if release not in releases:
            releases.append(release)

        samples.add(sampleName)

releases.sort()

# Set up base directory to store images
basedir = "data/" + '-'.join(releases).replace('-CMSSW_', '-')

# Start comparisons
for sample in samples:
    for selection in selections:
        ## Prepare output directory
        outDir = os.path.join(basedir, sample, selection, "image")
        if not os.path.isdir(outDir):
            os.makedirs(outDir)

        histPath = os.path.join('DQMData/Run 1/RPC/Run summary/RPCRecHitV', selection)

        ## Start overlaying
        for hName in overlayHists:
            histFullPath = os.path.join(histPath, hName)

            hStack = ROOT.THStack()
            legend = ROOT.TLegend(0.65, 0.2, 0.85, 0.5)

            colorIdx = 0
            for release in releases:
                rootFile = rootFiles[sample][release]
                h = rootFile.Get(histFullPath)
                if h == None:
                    print 'Cannot find histogram ', hName
                    continue

                histName = h.GetName().lower()
                if 'effic' in histName or 'rate' in histName:
                    h.SetMinimum(0.0)
                    h.SetMaximum(1.1)

                h.SetLineColor(colorIdx+ROOT.kOrange)
                h.SetLineWidth(2)

                hStack.Add(h)
                legend.AddEntry(h, release)

                if colorIdx == 0 :
                    hStackTitle = h.GetTitle()
                    hStackTitle += ";"+h.GetXaxis().GetTitle()
                    hStackTitle += ";"+h.GetYaxis().GetTitle()
                    hStack.SetTitle(hStackTitle)
                colorIdx += 1

            nameSuffix = sample+"_"+selection+"_"+hName
            canvas = ROOT.TCanvas("co_"+nameSuffix, nameSuffix, 800, 600)
            canvas.SetGridx()
            canvas.SetGridy();

            hStack.Draw("nostack")
            legend.Draw()

            imageFileName = hName.replace("/", "__")+ext
            canvas.Print(os.path.join(outDir, imageFileName))

        ## Do gaussian fits
        for hName in fitHists:
            nameSuffix = sample+"_"+selection+"_"+hName
            histFullPath = os.path.join(histPath, hName)

            nReleases = len(releases)

            hFitMean = ROOT.TH1F("hfm_"+nameSuffix, "Gaussian mean of "+hName, nReleases, 0, nReleases)
            hFitSigma = ROOT.TH1F("hfs_"+nameSuffix, "Gaussian sigma of "+hName, nReleases, 0, nReleases)
            hFitChi2 = ROOT.TH1F("hfx_"+nameSuffix, "Fit #Chi^{2} of "+hName, nReleases, 0, nReleases)

            bin = 0
            for release in releases:
                rootFile = rootFiles[sample][release]
                h = rootFile.Get(histFullPath)
                if h == None:
                    print 'Cannot find histogram ', hName
                    continue

                if h.GetEntries() == 0:
#                    print 'Empty histogram. Cannot fit ', hName
                    continue

                gaus = ROOT.TF1("gaus", "gaus", h.GetXaxis().GetXmin(), h.GetXaxis().GetXmax())
                h.Fit("gaus", "QER0")

                fitResult = h.GetFunction("gaus")

                bin += 1

                hFitMean.SetBinContent(bin, fitResult.GetParameter(1))
                hFitMean.SetBinError(bin, fitResult.GetParError(1))
                hFitSigma.SetBinContent(bin, fitResult.GetParameter(2))
                hFitSigma.SetBinError(bin, fitResult.GetParError(2))
                hFitChi2.SetBinContent(bin, fitResult.GetChisquare())

                hFitMean.GetXaxis().SetBinLabel(bin, release)
                hFitSigma.GetXaxis().SetBinLabel(bin, release)
                hFitChi2.GetXaxis().SetBinLabel(bin, release)

            canvas = ROOT.TCanvas("cf_"+nameSuffix, nameSuffix, 800, 600)
            canvas.Divide(1,3)

            pad = canvas.cd(1)
            pad.SetGridx()
            pad.SetGridy()
            hFitMean.Draw("E")

            pad = canvas.cd(2)
            pad.SetGridx()
            pad.SetGridy()
            hFitSigma.Draw("E")

            pad = canvas.cd(3)
            pad.SetGridx()
            pad.SetGridy()
            hFitChi2.Draw()

            imageFileName = "fit_"+hName.replace("/", "__")+ext
            canvas.Print(os.path.join(outDir, imageFileName))
