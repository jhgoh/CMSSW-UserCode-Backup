#!/usr/bin/env python
import sys, os

if 'ROOTSYS' not in os.environ:
    print 'ROOTSYS not set'
    sys.exit(1)

if len(sys.argv) == 1:
    print 'Usage : ', sys.argv[0], ' CMSSW_RELEASE1 CMSSW_RELEASE2 ...'
    sys.exit(2)

import ROOT

# Set constants
samples = ("RelValSingleMuPt10", "RelValSingleMuPt100", "RelValSingleMuPt1000")
selections = ("SimVsReco", "DTVsReco", "CSCVsReco")#, "TrackVsReco")
overlayHists = ("ClusterSize", 
                #"Effic_Eta",
                "globalEfficiencies", "Effic_Wheel", "Effic_Disk",
                "NoiseRate_Wheel", "NoiseRate_Disk",
                "LostRate_Wheel", "LostRate_Disk",
                "Res",
                "Res_WM2", "Res_WM1", "Res_W00", "Res_WP1", "Res_WP2",
                "Res_DM3", "Res_DM2", "Res_DM1", "Res_DP1", "Res_DP2", "Res_DP3",
                "Pull",
                "Pull_WM2", "Pull_WM1", "Pull_W00", "Pull_WP1", "Pull_WP2",
                "Pull_DM3", "Pull_DM2", "Pull_DM1", "Pull_DP1", "Pull_DP2", "Pull_DP3")
fitHists = ("Res",
            "Res_WM2", "Res_WM1", "Res_W00", "Res_WP1", "Res_WP2",
            "Res_DM3", "Res_DM2", "Res_DM1", "Res_DP1", "Res_DP2", "Res_DP3",
            "Pull",
            "Pull_WM2", "Pull_WM1", "Pull_W00", "Pull_WP1", "Pull_WP2",
            "Pull_DM3", "Pull_DM2", "Pull_DM1", "Pull_DP1", "Pull_DP2", "Pull_DP3")
ext = ".gif"

# Get list of files
rootFiles = {}
releases = []
for release in sys.argv[1:]:
    srcDir = os.path.join(release, 'src/Validation/RPCRecHits/test')

    if not os.path.isdir(srcDir):
        continue

    for fileName in os.listdir(srcDir):
        ## Consider only root files
        if fileName[-5:] != ".root" :
            continue

        ## Get corresponding sample name
        sample = ""
        for sampleCand in samples:
            if sampleCand+"__Validation.root" in fileName:
                sample = sampleCand
                break
        if sample == "":
            continue

        ## Open the root file
        rootFile = ROOT.TFile(os.path.join(srcDir,fileName))
        if not rootFile.IsOpen():
            continue

        ## Append to the file list
        if sample not in rootFiles:
            rootFiles[sample] = {}

        rootFiles[sample][release] = rootFile
        if release not in releases:
            releases.append(release)

releases.sort()

# Set up base directory to store images
basedir = "./" + '-'.join(releases).replace('-CMSSW_', '-')

# Start comparisons
for sample in samples:
    for selection in selections:
        ## Prepare output directory
        outDir = os.path.join(basedir, sample, selection, "image")
        if not os.path.isdir(outDir):
            os.makedirs(outDir)

        histPath = os.path.join('DQMData/Run 1/RPC/Run summary/RPCRecHitV', selection)

        ## Start overlaying
        for hName in overlayHists:
            histFullPath = os.path.join(histPath, hName)

            hStack = ROOT.THStack()
            legend = ROOT.TLegend(0.65, 0.2, 0.85, 0.5)

            colorIdx = 0
            for release in releases:
                rootFile = rootFiles[sample][release]
                h = rootFile.Get(histFullPath)
                if h == None:
                    print 'Cannot find histogram ', hName
                    continue

                histName = h.GetName().lower()
                if 'effic' in histName or 'rate' in histName:
                    h.SetMinimum(0)
                    h.SetMaximum(1.1)

                h.SetLineColor(colorIdx+2)

                hStack.Add(h)
                legend.AddEntry(h, release)

                if colorIdx == 0 :
                    hStackTitle = h.GetTitle()
                    hStackTitle += ";"+h.GetXaxis().GetTitle()
                    hStackTitle += ";"+h.GetYaxis().GetTitle()
                    hStack.SetTitle(hStackTitle)
                colorIdx += 1

            nameSuffix = sample+"_"+selection+"_"+hName
            canvas = ROOT.TCanvas("co_"+nameSuffix, nameSuffix, 800, 600)
            canvas.SetGridx()
            canvas.SetGridy();

            hStack.Draw("nostack")
            legend.Draw()

            imageFileName = hName+ext
            canvas.Print(os.path.join(outDir, imageFileName))

        ## Do gaussian fits
        for hName in fitHists:
            nameSuffix = sample+"_"+selection+"_"+hName
            histFullPath = os.path.join(histPath, hName)

            nReleases = len(releases)

            hFitMean = ROOT.TH1F("hfm_"+nameSuffix, "Gaussian mean of "+hName, nReleases, 0, nReleases)
            hFitSigma = ROOT.TH1F("hfs_"+nameSuffix, "Gaussian sigma of "+hName, nReleases, 0, nReleases)
            hFitChi2 = ROOT.TH1F("hfx_"+nameSuffix, "Fit #Chi^{2} of "+hName, nReleases, 0, nReleases)

            bin = 0
            for release in releases:
                rootFile = rootFiles[sample][release]
                h = rootFile.Get(histFullPath)
                if h == None:
                    print 'Cannot find histogram ', hName
                    continue

                if h.GetEntries() == 0:
#                    print 'Empty histogram. Cannot fit ', hName
                    continue

                gaus = ROOT.TF1("gaus", "gaus", h.GetXaxis().GetXmin(), h.GetXaxis().GetXmax())
                h.Fit("gaus", "QER0")

                fitResult = h.GetFunction("gaus")

                bin += 1

                hFitMean.SetBinContent(bin, fitResult.GetParameter(1))
                hFitMean.SetBinError(bin, fitResult.GetParError(1))
                hFitSigma.SetBinContent(bin, fitResult.GetParameter(2))
                hFitSigma.SetBinContent(bin, fitResult.GetParError(2))
                hFitChi2.SetBinContent(bin, fitResult.GetChisquare())

                hFitMean.GetXaxis().SetBinLabel(bin, release)
                hFitSigma.GetXaxis().SetBinLabel(bin, release)
                hFitChi2.GetXaxis().SetBinLabel(bin, release)

            canvas = ROOT.TCanvas("cf_"+nameSuffix, nameSuffix, 800, 600)
            canvas.Divide(1,3)

            pad = canvas.cd(1)
            pad.SetGridx()
            pad.SetGridy()
            hFitMean.Draw("E")

            pad = canvas.cd(2)
            pad.SetGridx()
            pad.SetGridy()
            hFitSigma.Draw("E")

            pad = canvas.cd(3)
            pad.SetGridx()
            pad.SetGridy()
            hFitChi2.Draw()

            imageFileName = "fit_"+hName+ext
            canvas.Print(os.path.join(outDir, imageFileName))
